 /*state = {
    contacts: []
  };*/

  /* componentDidMount() {
    axios.get("http://jsonplaceholder.typicode.com/users").then(response => {
      console.log(response);
      this.setState({
        contacts: response.data
      });
    });
  }
*/

 {/*} <img src={logo} className="App-logo" alt="logo" />
        <h1>Spotify</h1>
        <ul>
          {this.state.contacts.map(contact => (
            <li key={contact.id}>{contact.name}</li>
          ))}
        </ul>
          </div>*/}

          // createTable = () => {
  //   let table = []
  //   for (let i = 0; i < 3; i++) {
  //     let children = []
  //     //Inner loop to create children
  //     for (let j = 0; j < 5; j++) {
  //       children.push(<td>{`Column ${j + 1}`}</td>)
  //     }
  //     //Create the parent and add the children
  //     table.push(<tr>{children}</tr>)
  //   }
  //   return table

  // }

  //   fetchResults = (query) => {
  //     spotifyApi.searchTracks("Love").then(
  //       function(data) {
  //         console.log('Search by "Love"', data);
  //       },
  //       function(err) {
  //         console.error(err);
  //       }
  //     );
  //   };

    fetchSearchResults = (updatedPageNo = "", query) => {
    const pageNumber = updatedPageNo ? `&page=${updatedPageNo}` : "";
    // By default the limit of results is 20
    const searchUrl = `https://pixabay.com/api/?key=12413278-79b713c7e196c7a3defb5330e&q=${query}${pageNumber}`;
    if (this.cancel) {
      // Cancel the previous request before making a new request
      this.cancel.cancel();
    }
    // Create a new CancelToken
    this.cancel = axios.CancelToken.source();
    axios
      .get(searchUrl, {
        cancelToken: this.cancel.token
      })
      .then(res => {
        const resultNotFoundMsg = !res.data.hits.length
          ? "There are no more search results. Please try a new search."
          : "";
        this.setState({
          results: res.data.hits,
          message: resultNotFoundMsg,
          loading: false
        });
      })
      .catch(error => {
        if (axios.isCancel(error) || error) {
          this.setState({
            loading: false,
            message: "Failed to fetch results.Please check network"
          });
        }
      });
  };

  
  // getNowPlaying = () => {
  //   spotifyApi.getMyCurrentPlaybackState()
  //    .then((response) => {
  //      this.setState({
  //        nowPlaying: {
  //          name: response.item.name,
  //          image: response.item.album.images[0].url
  //        }
  //      });
  //    })
  // }

  // this.setState({
        //   loading: false,
        //   message: "Failed to fetch results. Please check network"
        // });

  render() {
    const {message} = this.state; 
    return (
      <div className="container">
        {/*Heading*/}
        <h2 className="heading">Search me</h2>
        {/*Search Input*/}
        <label className="search-label" htmlFor="search-input">
          <input
            type="text"
            value={this.state.query}
            id="search-input"
            placeholder="Search..."
            onChange={this.handleOnInputChange}
          />
          <Icon color="red" name="search" className="search-icon" />
        </label>
        {/* {this.renderSearchResults()} */}
        {message && <p className="message">{message}</p>}
      </div>
    );
  }
}

<a href="http://localhost:8888">
            {/* <button>Login with Spotify</button> */}
            {!this.state.loggedIn ? <Button inverted color="red">
              {" "}
              Login to Spotify
            </Button> : null }
            
          </a>


import React, { Component } from "react";
import { Grid, Image, Container } from "semantic-ui-react";
import SpotifyWebAPI from "spotify-web-api-js";
import { Suggestions } from "./Suggestions";
const spotifyApi = new SpotifyWebAPI();

export class Popular extends Component {
  constructor(props) {
    super(props);
    this.state = {
      results: [],
      queryOne: "",
      queryTwo: ""
    };
  }

  getArtistOne = () => {
    spotifyApi.searchArtists(this.state.queryOne).then(response => {
      this.setState({
        results: response.artists.items
      });
    });
  };

  getArtistTwo = () => {
    spotifyApi.searchArtists(this.state.queryTwo).then(response => {
      this.setState({
        results: response.artists.items
      });
    });
  };

  handleInputOneChange = () => {
    this.setState(
      {
        queryOne: this.search.value
      },
      () => {
        if (this.state.queryOne && this.state.queryOne.length > 1) {
          if (this.state.queryOne.length % 2 === 0) {
            this.getArtistOne();
          }
        }
      }
    );
  };

  handleInputTwoChange = () => {
    this.setState(
      {
        queryTwo: this.search.value
      },
      () => {
        if (this.state.queryTwo && this.state.queryTwo.length > 1) {
          if (this.state.queryTwo.length % 2 === 0) {
            this.getArtistTwo();
          }
        }
      }
    );
  };


  render() {
    return (
      <div>
        <div>
          <h1>Which one of your favorite artists is the most popular</h1>
        </div>
        <Grid columns={2} padded>
          <Grid.Column>
            <form>
              <input
                // value={this.state.query}
                onChange={this.handleInputOneChange}
                placeholder="Artist 1"
                ref={input => (this.search = input)}
              />
              {this.state.queryOne.length < 1 ? null : (
                <Suggestions results={this.state.results} />
              )}
            </form>
          </Grid.Column>
          <Grid.Column>
            <form>
              <input 
              onChange={this.handleInputTwoChange}
              placeholder="Artist 2"
              ref={input => (this.search = input)}
              
              />
              {this.state.queryTwo.length < 1 ? null : (
                <Suggestions results={this.state.results} />
              )}
              {/* <p>{this.state.queryTwo}</p> */}
            </form>
          </Grid.Column>
        </Grid>
        <Container>The results</Container>
      </div>
    );
  }
}

"scripts": {
    "start": "node authorization_code/app.js"
  }

  ====================================================================================
  <Grid columns={3} divided centered>
        <Grid.Row>
          <Grid.Column>
            Songs
            <Card.Group centered itemsPerRow={2} >
              {track.map(unit => (
                <Card key={unit.id} color="purple" >
                  <Image src={unit.album.images.length ? unit.album.images[0].url : songSrc} size="mini" />
                  <Card.Content>
                    <Card.Header>{unit.name}</Card.Header>
                  </Card.Content>
                  <Card.Meta>
                    {unit.artists[0].name}
                  </Card.Meta>
                </Card>
              ))}
            </Card.Group>
          </Grid.Column>
          <Grid.Column>
            Album
            <Card.Group centered itemsPerRow={2}>
              {album.map(unit => (
                <Card key={unit.id} color="pink" size="mini">
                  <Image src={unit.images.length ? unit.images[0].url : albumSrc} size="mini" />
                  <Card.Content>
                    <Card.Header>{unit.name}</Card.Header>
                  </Card.Content>
                  <Card.Meta>
                    {unit.artists[0].name}
                  </Card.Meta>
                </Card>
              ))}
            </Card.Group>
          </Grid.Column>
        </Grid.Row>

        <Grid.Row>
          <Grid.Column>
            Artist
            <Card.Group centered itemsPerRow={2}>
              {artist.map(unit => (
                <Card key={unit.id} color="teal" size="small">

                  <Image src={unit.images.length ? unit.images[0].url : artistSrc} size="mini" />
                  <Card.Content>
                    <Card.Header>{unit.name}</Card.Header>
                  </Card.Content>
                </Card>
              ))}
            </Card.Group>
          </Grid.Column>
          <Grid.Column>
            Playlist
            <Card.Group centered itemsPerRow={2}>
              {playlist.map(unit => (
                <Card key={unit.id} color="olive" size="mini">
                  <Image 
                  src={unit.images.length ? unit.images[0].url : playlistSrc} />
                  <Card.Content>
                    <Card.Header>{unit.name}</Card.Header>
                  </Card.Content>
                  <Card.Meta>
                    Owner:
                    {unit.owner.display_name}
                  </Card.Meta>
                </Card>
              ))}
            </Card.Group>
          </Grid.Column>
        </Grid.Row>
      </Grid>


      ========================================================================
      <Grid columns={5}>
            <Header>Your top songs</Header>
            <Grid.Row>
              {topTracks.map(track => (
                <Grid.Column>
                  <Card key={track.id}>
                    <Image src={track.album.images[0].url} wrapped ui={false} />
                    <Card.Content inverted>
                    <Card.Header>{track.name}</Card.Header>
                    <Card.Meta>{track.artists[0].name} </Card.Meta>
                    </Card.Content>
                  </Card>
                </Grid.Column>
              ))}
            </Grid.Row>

            <Header>Your top artists</Header>
            <Grid.Row>
              {topArtists.map(artist => (
                <Grid.Column>

             {/* <Card key={artist.id}> */}
                    <Image src={artist.images[0].url} circular />
                    <Header>{artist.name}</Header>
                     {/* <img
                      src={artist.images[0].url}
                      class="ui medium circular image"
                      width="50px"
                    />  */}
                    {/* <Card.Content>
                      <Card.Header>{artist.name}</Card.Header>
                    </Card.Content>
                  </Card>  */}
                    
                </Grid.Column>
              ))}
            </Grid.Row>
          </Grid>

          res.redirect('http://localhost:3000/#' +
          querystring.stringify({
            access_token: access_token,
            refresh_token: refresh_token
          }));

          <List selection >
          {songs.map(song => (
            <List.Item key={song.track.id}>
              <Image
                avatar
                src={song.track.album.images[0].url}
              />
              <List.Content>
                <List.Header color="red" as="a">{song.track.name}</List.Header>
                <List.Description>
                  By{" "}
                  <a>
                    <b>{song.track.artists[0].name}</b>
                  </a>
                  {" "}
                </List.Description>
              </List.Content>
            </List.Item>
          ))}
        </List>

        "scripts": {
    "start": "node app.js",
    "heroku-postbuild": "cd spotify-app && npm install && npm run build"
  }

  "scripts": {
    "start": "node app.js",
    "heroku-postbuild" : "NPM_CONFIG_PRODUCTION=false npm install --prefix spotify-app  && npm run build --prefix spotify-app && npm start",
    "server": "node app.js"
  }
}
do this for app.js
if (process.env.NODE_ENV !== 'production') {
		  if (/localhost:3000\/$/.test(window.location.href)) {
				window.location.replace("https://accounts.spotify.com/authorize?client_id=6370e456654740c8bf8d82444a8b950b&redirect_uri=http:%2F%2Flocalhost%3A%33%30%30%30&response_type=token&state=123")
			}
		}
		else {
			if (/advanced-spotify.surge.sh\/$/.test(window.location.href)) {
				window.location.replace("https://accounts.spotify.com/authorize?client_id=6370e456654740c8bf8d82444a8b950b&redirect_uri=http:%2F%2Fadvanced-spotify.surge.sh&response_type=token&state=123")
			}
		}

        {/* <div>
          <table className={styles.table}>
            <tr>
              <th>Title</th>
              <th>Artists</th>
              <th>Album</th>
            </tr>
            {songs.map(song => (
              <tr key={song.track.id}>
                <td>
                  <img src={song.track.album.images[2].url} />
                  <p>{song.track.name}</p>
                </td>
                <td>
                  <a
                    onClick={() => {
                      this.openArtist(song.track.artists[0].id);
                    }}
                  >
                    {song.track.artists[0].name}
                  </a>
                </td>
                <td>{song.track.album.name}</td>
              </tr>
            ))}
          </table>
        </div> */}

          // style={{
              //   //marginTop: "100px",
              //   marginLeft: "15rem",
              //   //border: 'solid red 5px',
              //   padding: "0px 50px",
              //   //marginRight: "0px",
              //   height: "100vh",
              //   overflow: "auto"
              // }}